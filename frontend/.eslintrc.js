module.exports = {
    extends: 'airbnb',
    parser: '@typescript-eslint/parser',
    plugins: ['react', 'typescript', '@typescript-eslint', 'prettier'],
    extends: ['plugin:@typescript-eslint/recommended', 'eslint-config-prettier', 'plugin:prettier/recommended'],
    parserOptions: {
        jsx: true,
        useJSXTextNode: true,
        project: './tsconfig.json',
    },

    rules: {
        '@typescript-eslint/ban-ts-comment': 'off',
        '@typescript-eslint/no-explicit-any': 'off',
        'no-explicit-any': 'off',
        'ban-ts-comment': 'off',
        'guard-for-in': 0,
        'react/prop-types': 0,
        'comma-dangle': 0,
        'react/jsx-closing-bracket-location': [2, 'tag-aligned'],
        'react/jsx-no-bind': 'off',
        'no-unused-vars': 'off',
        'react/sort-comp': [
            2,
            {
                order: [
                    'static-methods',
                    'type-annotations',
                    'instance-variables',
                    'lifecycle',
                    'rendering',
                    'variables',
                    '/^handle.+$/',
                    'instance-methods',
                    'everything-else',
                ],
                groups: {
                    variables: ['/animation|ID|timeout|interval|node|delay/gi', '/^el.+$/'],
                    lifecycle: [
                        'contextTypes',
                        'childContextTypes',
                        'defaultProps',
                        'propTypes',
                        'state',
                        'constructor',
                        'getChildContext',
                        'getDerivedStateFromProps',
                        'componentWillMount',
                        'UNSAFE_componentWillMount',
                        'componentDidMount',
                        'componentWillReceiveProps',
                        'UNSAFE_componentWillReceiveProps',
                        'shouldComponentUpdate',
                        'componentWillUpdate',
                        'UNSAFE_componentWillUpdate',
                        'getSnapshotBeforeUpdate',
                        'componentDidUpdate',
                        'componentDidCatch',
                        'componentWillUnmount',
                    ],
                    rendering: ['render', '/^render.+$/'],
                },
            },
        ],
        camelcase: [2, { properties: 'never' }],
    },
    settings: {
        react: {
            version: 'latest',
        },
    },
};
